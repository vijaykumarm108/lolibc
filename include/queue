// Lo-Overhead STL library - Lostl
//
#pragma once

 namespace std {

/// \class queue
///
/// \brief Queue adapter to std containers.
///
/// The most efficient way to use this implementation is to fill the queue
/// and the completely empty it before filling again.
///
template <typename T>
class queue {
public:
    typedef T				value_type;
    typedef size_t			size_type;
    typedef ptrdiff_t		difference_type;
    typedef T&				reference;
    typedef const T&		const_reference;
    typedef T*				pointer;
    typedef const T*		const_pointer;
public:
    inline					queue (void)			: m_Storage (), m_Front (0) { }
    explicit inline			queue (const vector<T>& s)	: m_Storage (s), m_Front (0) { }
    explicit inline			queue (const queue& s)		: m_Storage (s.m_Storage), m_Front (0) { }
    inline bool				empty (void) const		{ return (!size()); }
    inline reference		front (void)			{ return (m_Storage [m_Front]); }
    inline const_reference	front (void) const		{ return (m_Storage [m_Front]); }
    inline reference		back (void)			{ return (m_Storage.back()); }
    inline const_reference	back (void) const		{ return (m_Storage.back()); }
    inline void				push (const value_type& v);
    inline void				pop (void);
	inline size_type		size (void) const		{ return (m_Storage.size() - m_Front); }
    inline bool				operator== (const queue& s) const	{ return (m_Storage == s.m_Storage && m_Front == s.m_Front); }
    inline bool				operator< (const queue& s) const	{ return (size() < s.size()); }
private:
    vector<T>				m_Storage;	///< Where the data actually is.
    size_type				m_Front;	///< Index of the element returned by next pop.
};

/// Pushes \p v on the queue.
template <typename T> inline void queue<T>::push (const value_type& v)
{
    if (m_Front)
	{
		m_Storage.erase (m_Storage.begin(), m_Front);
		m_Front = 0;
    }
    m_Storage.push_back (v);
}

/// Pops the topmost element from the queue.
template <typename T> inline void queue<T>::pop (void)
{
    if (++m_Front >= m_Storage.size())
		m_Storage.resize (m_Front = 0);
}

/// \class priority_queue
/// \ingroup Sequences
///
/// \brief Sorted queue adapter to std containers.
///
/// Acts just like the queue adapter, but keeps the elements sorted by priority
/// specified by the given comparison operator.
///
template <typename T, typename Ctr = vector<T>, typename Comp = less<typename Ctr::value_type> >
class priority_queue {
public:
    typedef Ctr					base_ctr;
    typedef typename base_ctr::value_type	value_type;
    typedef typename base_ctr::size_type	size_type;
    typedef typename base_ctr::const_pointer	const_pointer;
    typedef typename base_ctr::const_reference	reference;
public:
	priority_queue (const Comp& c = Comp()) : m_v(), m_c (c) {}
	priority_queue (const_pointer f, const_pointer l, const Comp& c = Comp())
			    : m_v (f, l), m_c (c) { make_heap (m_v.begin(), m_v.end(), m_c); }
    inline size_type	size (void) const	{ return (m_v.size()); }
    inline bool		empty (void) const	{ return (m_v.empty()); }
    inline reference	top (void) const	{ return (m_v.at(0)); }
    inline void		push (reference v)	{ m_v.push_back (v); make_heap (m_v.begin(), m_v.end(), m_c); }
    inline void		pop (void)		{ pop_heap (m_v.begin(), m_v.end()); m_v.pop_back(); }
private:
    base_ctr		m_v;	///< Element container.
    Comp		m_c;	///< Comparison functor by value.
};


}  // namespace std

