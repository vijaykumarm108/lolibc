/*
 * Copyright © 2012, MuThink Inc, All rights reserved.
 * http://www.muthink.com
 * Copying and distribution of this product is forbidden without direct permission from MuThink Inc.
 */
// MSVCRT.DLL header for type_info structure.
#if _MSC_VER > 1000
#pragma once
#endif
#ifndef _INC_TYPEINFO
#define _INC_TYPEINFO

#ifdef  _MSC_VER
#pragma pack(push,8)
#endif  /* _MSC_VER */

class type_info {
public:
	_CRTIMP virtual ~type_info();
	_CRTIMP int operator==(const type_info& rhs) const;
	_CRTIMP int operator!=(const type_info& rhs) const;
	_CRTIMP int before(const type_info& rhs) const;
	_CRTIMP const char* name() const;
	_CRTIMP const char* raw_name() const;
private:
	void *_m_data;
	char _m_d_name[1];
	type_info(const type_info& rhs);
	type_info& operator=(const type_info& rhs);
};

// This include must occur below the definition of class type_info
 #include <exception>

 namespace std {
		// CLASS bad_cast
	class _CRTIMP bad_cast : public exception {
	public:
		bad_cast(const char *_S = "bad cast") throw()
			: exception(_S) {}
		virtual ~bad_cast() throw()
			{}
	protected:
		virtual void _Doraise() const
			{throw(*this); }
	};
		// CLASS bad_typeid
	class _CRTIMP bad_typeid : public exception {
	public:
		bad_typeid(const char *_S = typeid(bad_typeid).name()) throw() : exception(_S) {}
		virtual ~bad_typeid() throw()
			{}
	protected:
		virtual void _Doraise() const
			{throw(*this); }
	};

	class _CRTIMP __non_rtti_object : public bad_typeid {
	public:
		__non_rtti_object(const char * what_arg) : bad_typeid(what_arg) {}
	};
	using ::type_info;
}	// end namespace std

using std::__non_rtti_object;

#ifdef  _MSC_VER
#pragma pack(pop)
#endif  /* _MSC_VER */

#endif // _INC_TYPEINFO
