// Lo-Overhead STL library - Lostl
//
#pragma once

#include "exception"
#include "stdlib.h"

/// Just like malloc, but throws on failure.
void* tmalloc (size_t n) /*throw (lo::std::bad_alloc)*/ __attribute__((malloc));
/// Just like free, but doesn't crash when given a NULL.
inline void nfree (void* p) throw() { if (p) free (p); }

namespace std {

	class bad_alloc : public ::exception {
	public:
		explicit		bad_alloc (size_t nBytes = 0) throw();
	};
} // namespace std

#if WITHOUT_LIBSTDCPP

//
// These are replaceable signatures:
//  - normal single new and delete (no arguments, throw @c bad_alloc on error)
//  - normal array new and delete (same)
//  - @c nothrow single new and delete (take a @c nothrow argument, return
//    @c NULL on error)
//  - @c nothrow array new and delete (same)
//
//  Placement new and delete signatures (take a memory address argument,
//  does nothing) may not be replaced by a user's program.
//
//inline void* operator new (size_t n) /*throw (lo::std::bad_alloc)*/	{ return (malloc (n)); }
//inline void* operator new[] (size_t n) /*throw (lo::std::bad_alloc)*/	{ return (malloc (n)); }
//inline void  operator delete (void* p) throw()			{ nfree (p); }
//inline void  operator delete[] (void* p) throw()		{ nfree (p); }

// Default placement versions of operator new.
//inline void* operator new (size_t, void* p) throw() { return (p); }
//inline void* operator new[] (size_t, void* p) throw() { return (p); }

// Default placement versions of operator delete.
//inline void  operator delete  (void*, void*) throw() { }
//inline void  operator delete[](void*, void*) throw() { }

#else
#include <new>
#endif	// WITHOUT_LIBSTDCPP
