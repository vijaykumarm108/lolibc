#pragma once
#include "istream"
#include "lo_block.h"
#include "stdlib.h"
#include "lo_utf8.h"
#include "stdarg.h"
#include "xutility"

namespace std {

	class string : public lo::block {
	public:
		typedef char				value_type;
		typedef value_type*			pointer;
		typedef const value_type*	const_pointer;
		typedef wchar_t				wvalue_type;
		typedef wvalue_type*		wpointer;
		typedef const wvalue_type*	const_wpointer;
		typedef pointer				iterator;
		typedef const_pointer		const_iterator;
		typedef value_type&			reference;
		typedef value_type			const_reference;
		typedef ::std::reverse_iterator<iterator>			reverse_iterator;
		typedef ::std::reverse_iterator<const_iterator>		const_reverse_iterator;
		typedef lo::utf8in_iterator<const_iterator>				utf8_iterator;
		enum {npos = -1 };
		//static const uoff_t npos = (uoff_t)(-1);	///< Value that means the end of string.
	public:
		inline			string (void)	{}
						string (const string& s);
		inline			string (const string& s, uoff_t o, size_type n);
		inline explicit	string (const cblocklink& l);
						string (const_pointer s);
						string (pointer s);
						string (const_wpointer s );
		inline			string (const_pointer s, size_type len);
		inline			string (const_pointer s1, const_pointer s2);
		explicit		string (size_type n, value_type c = 0);
		//~string();
	
		inline void				append (const_iterator i1, const_iterator i2)	{ append (i1, distance (i1, i2)); }
		void	   				append (const_pointer s, size_type len);
		void	   				append (const_pointer s);
		void					append (size_type n, const_reference c);
		inline void				append (size_type n, wvalue_type c)		{ insert (size(), c, n); }
		inline void				append (const_wpointer s1, const_wpointer s2)	{ insert (size(), s1, s2); }
		inline void				append (const_wpointer s)			{ const_wpointer se (s); for (;se&&*se;++se) ; append (s, se); }
		inline void				append (const string& s)			{ append (s.begin(), s.end()); }
		inline void				append (const string& s, uoff_t o, size_type n)	{ append (s.iat(o), s.iat(o+n)); }
		inline void				assign (const_iterator i1, const_iterator i2)	{ assign (i1, distance (i1, i2)); }
		void	    			assign (const_pointer s, size_type len);
		void	    			assign (const_pointer s);
		inline void				assign (const_wpointer s1, const_wpointer s2)	{ clear(); append (s1, s2); }
		inline void				assign (const_wpointer s1)			{ clear(); append (s1); }
		inline void				assign (const string& s)			{ assign (s.begin(), s.end()); }
		inline void				assign (const string& s, uoff_t o, size_type n)	{ assign (s.iat(o), s.iat(o+n)); }
		inline const_reference	at (uoff_t pos) const	{ assert (pos <= size() && begin()); return (begin()[pos]); }
		inline reference		at (uoff_t pos)			{ assert (pos <= size() && begin()); return (begin()[pos]); }
		inline const_reference	back (void) const		{ return (at(size()-1)); }
		inline reference		back (void)				{ return (at(size()-1)); }
		inline const_iterator	begin (void) const		{ return c_str(); }
		inline iterator			begin (void)			{ return data(); }
		inline const_pointer	c_str (void) const		{ return (string::const_pointer (block::cdata())); }
		size_type				capacity (void) const;
		inline void				clear (void)			{ resize (0); }
		inline int				compare (const string& s) const	{ return (compare (begin(), end(), s.begin(), s.end())); }
		inline int				compare (const_pointer s) const	{ return (compare (begin(), end(), s, s + strlen(s))); }
		static int				compare (const_iterator first1, const_iterator last1, const_iterator first2, const_iterator last2);
		size_type				copyto (pointer p, size_type n, const_iterator start = NULL) const;
		inline pointer			data (void)				{ return (string::pointer (block::data())); }
		inline const_iterator	end (void) const		{ return (const_iterator (block::end())); }
		inline iterator			end (void)				{ return (iterator (block::end())); }
		inline const_iterator	iat (uoff_t pos) const	{ return (begin() + minV (pos, size())); }
		inline iterator			iat (uoff_t pos)		{ return (begin() + minV (pos, size())); }
		const_iterator			wiat (uoff_t i) const;
		inline iterator			wiat (uoff_t i)			{ return (const_cast<iterator>(const_cast<const string*>(this)->wiat(i))); }
		inline size_type		length (void) const;
		iterator				erase (iterator epo, size_type n = 1);
		void					erase (uoff_t epo = 0, size_type n = 1);
		inline iterator			erase (iterator first, const_iterator last)	{ return (erase (first, size_type(distance(first,last)))); }
		inline void				eraser (uoff_t first, uoff_t last)		{ erase (iat(first), iat(last)); }
		uoff_t					find (const_reference c, uoff_t pos = 0) const;
		uoff_t					find (const string& s, uoff_t pos = 0) const;
		uoff_t					find_first_of (const string& s, uoff_t pos = 0) const;
		uoff_t					find_first_not_of (const string& s, uoff_t pos = 0) const;
		uoff_t					find_last_of (const string& s, uoff_t pos = npos) const;
		size_t					find_last_of ( char c, size_t pos = npos ) const;
		size_t					find_last_of ( const char* s, size_t pos = npos ) const;
		uoff_t					find_last_not_of (const string& s, uoff_t pos = npos) const;
		int						format (const char* fmt, ...) __attribute__((__format__(__printf__, 2, 3)));
		static hashvalue_t		hash (const char* f1, const char* l1);
		void					insert (const uoff_t ip, wvalue_type c, size_type n = 1);
		void					insert (const uoff_t ip, const_wpointer first, const_wpointer last, const size_type n = 1);
		iterator				insert (iterator start, const_reference c, size_type n = 1);
		iterator				insert (iterator start, const_pointer s, size_type n = 1);
		iterator				insert (iterator start, const_pointer first, const_iterator last, size_type n = 1);
		inline void				insert (uoff_t ip, const_pointer s, size_type nlen)		{ insert (iat(ip), s, s + nlen); }
		inline void				insert (uoff_t ip, size_type n, value_type c)			{ insert (iat(ip), c, n); }
		inline void				insert (uoff_t ip, const string& s, uoff_t sp, size_type slen)	{ insert (iat(ip), s.iat(sp), s.iat(sp + slen)); }
		size_type				max_size (void) const;
		inline					operator const value_type* (void) const;
		inline					operator const unsigned char *() { return reinterpret_cast<const unsigned char *>(c_str()); }
		inline					operator value_type* (void);
		inline const string&	operator= (const string& s)	{ assign (s.begin(), s.end()); return (*this); }
		inline const string&	operator= (const_reference c)	{ assign (&c, 1); return (*this); }
		inline const string&	operator= (const_pointer s)	{ assign (s); return (*this); }
		inline const string&	operator= (const_wpointer s)	{ assign (s); return (*this); }
		inline const string&	operator+= (const string& s)	{ append (s.begin(), s.size()); return (*this); }
		inline const string&	operator+= (const_reference c)	{ append (1, c); return (*this); }
		inline const string&	operator+= (const_pointer s)	{ append (s); return (*this); }
		inline const string&	operator+= (wvalue_type c)	{ append (1, c); return (*this); }
		inline const string&	operator+= (const_wpointer s)	{ append (s); return (*this); }
		inline string			operator+ (const string& s) const;
		inline bool				operator== (const string& s) const	{ return (block::operator== (s)); }
		bool					operator== (const_pointer s) const;
		inline bool				operator== (const_reference c) const	{ return (size() == 1 && c == at(0)); }
		inline bool				operator!= (const string& s) const	{ return (!operator== (s)); }
		inline bool				operator!= (const_pointer s) const	{ return (!operator== (s)); }
		inline bool				operator!= (const_reference c) const	{ return (!operator== (c)); }
		inline bool				operator< (const string& s) const	{ return (0 > compare (s)); }
		inline bool				operator< (const_pointer s) const	{ return (0 > compare (s)); }
		inline bool				operator< (const_reference c) const	{ return (0 > compare (begin(), end(), &c, &c + 1)); }
		inline bool				operator> (const_pointer s) const	{ return (0 < compare (s)); }
		inline void				push_back (const_reference c)	{ append (1, c); }
		inline void				push_back (wvalue_type c)	{ append (1, c); }
		inline void				pop_back (void)			{ resize (size() - 1); }
		inline const_reverse_iterator
								rbegin (void) const	{ return (const_reverse_iterator (end())); }
		inline reverse_iterator	rbegin (void)			{ return (reverse_iterator (end())); }
		void					read (istream&);
		inline const_reverse_iterator
								rend (void) const	{ return (const_reverse_iterator (begin())); }
		inline reverse_iterator	rend (void)			{ return (reverse_iterator (begin())); }
		void					replace (iterator first, iterator last, const_pointer s);
		void					replace (iterator first, iterator last, const_pointer i1, const_pointer i2, size_type n = 1);
		inline void				replace (iterator first, iterator last, const string& s)			{ replace (first, last, s.begin(), s.end()); }
		inline void				replace (iterator first, iterator last, const_pointer s, size_type slen)	{ replace (first, last, s, s + slen); }
		inline void				replace (iterator first, iterator last, size_type n, value_type c)		{ replace (first, last, &c, &c + 1, n); }
		inline void				replace (uoff_t rp, size_type n, const string& s)				{ replace (iat(rp), iat(rp + n), s); }
		inline void				replace (uoff_t rp, size_type n, const string& s, uoff_t sp, size_type slen)	{ replace (iat(rp), iat(rp + n), s.iat(sp), s.iat(sp + slen)); }
		inline void				replace (uoff_t rp, size_type n, const_pointer s, size_type slen)		{ replace (iat(rp), iat(rp + n), s, s + slen); }
		inline void				replace (uoff_t rp, size_type n, const_pointer s)				{ replace (iat(rp), iat(rp + n), string(s)); }
		inline void				replace (uoff_t rp, size_type n, size_type count, value_type c)			{ replace (iat(rp), iat(rp + n), count, c); }
		void					resize (size_type n);
		inline void				resize (size_type n, value_type c);
		uoff_t					rfind (const_reference c, uoff_t pos = npos) const;
		uoff_t					rfind (const string& s, uoff_t pos = npos) const;
		size_t					stream_size (void) const;
		inline string			substr (uoff_t o, size_type n = npos) const	{ return (string (*this, o, n)); }
		inline utf8_iterator	utf8_begin (void) const	{ return (utf8_iterator (begin())); }
		inline utf8_iterator	utf8_end (void) const	{ return (utf8_iterator (end())); }
		int						vformat (const char* fmt, va_list args);
		void					write (ostream& os) const;
	
	protected:
		virtual size_type		minimumFreeCapacity (void) const throw() __attribute__((const));
	};


	template <> inline void swap (string& a, string& b)			{ a.swap (b); }

//----------------------------------------------------------------------
// Operators needed to avoid comparing pointer to pointer

#define PTR_STRING_CMP(op, impl)	\
inline bool op (const char* s1, const string& s2) { return impl; }
PTR_STRING_CMP (operator==, (s2 == s1))
PTR_STRING_CMP (operator!=, (s2 != s1))
PTR_STRING_CMP (operator<,  (s2 >  s1))
PTR_STRING_CMP (operator<=, (s2 >= s1))
PTR_STRING_CMP (operator>,  (s2 <  s1))
PTR_STRING_CMP (operator>=, (s2 <= s1))
#undef PTR_STRING_CMP

inline string operator+ (const char* cs, const string& ss) { string r; r.reserve (strlen(cs)+ss.size()); r += cs; r += ss; return (r); }

//----------------------------------------------------------------------

inline hashvalue_t hash_value (const char* first, const char* last)
{
	return (string::hash (first, last));
}

inline hashvalue_t hash_value (const char* v)
{
	return (hash_value (v, v + strlen(v)));
}

//----------------------------------------------------------------------
// Class wstring is only for the cases when we need to convert to and from widechar strings
class wstring
{
public:
	inline wstring() : buffer(nullptr) {}
	wstring(const char *_init) { init(_init); }
	wstring(const char *_init, size_t size);
	wstring(size_t size)		{ buffer = reinterpret_cast<wchar_t *>(malloc(size*sizeof(wchar_t))); *buffer = 0; }
	~wstring();
	operator const wchar_t *()	{ return const_cast<const wchar_t *>(buffer); }
	operator wchar_t *()		{ return buffer; }
	inline size_t				capacity ( ) const	{ return _msize( reinterpret_cast<void *>(buffer))/sizeof(wchar_t);}
	inline string::size_type	length (void)		{ return wcslen(buffer); }
	void toString( string& text);
private:
	void init(const char *_init);
	wchar_t *buffer;
};

} // namespace std

// Specialization for stream alignment
//JCS -- ALIGNOF (::lo::std::string, __alignof(::lo::std::string::value_type()))

