// Lo-Overhead STL library - Lostl
//
#pragma once

#include "ios"
#include "string"
#include <sys/types.h>

struct stat;

namespace std {

/// \brief Implements file operations.
///
/// This is not implemented as a stream, but rather as a base for one. You
/// should use ifstream or ofstream if you want flow operators. Otherwise
/// this only implements functions for binary i/o.
///
class fstream : public ios_base {
public:
					fstream (void);
    explicit		fstream (const char* filename, openmode mode = in | out);
    explicit		fstream (int nfd, const char* filename = "");
	~fstream (void) throw();
	void				attach (int nfd, const char* filename = "");
	void				close (void);
	void				detach (void);
	int					fcntl (const char* rname, int request, long argument = 0);
	inline int			fcntl (const char* rname, int request, int argument)	{ return (fstream::fcntl (rname, request, long(argument))); }
	inline int			fcntl (const char* rname, int request, void* argument)	{ return (fstream::fcntl (rname, request, argument)); }
	inline int			fd (void) const		{ return (m_fd); }
	inline void			flush (void)		{ sync(); }
	int					ioctl (const char* rname, int request, long argument = 0);
	inline int			ioctl (const char* rname, int request, int argument)	{ return (fstream::ioctl (rname, request, long(argument))); }
	inline int			ioctl (const char* rname, int request, void* argument)	{ return (fstream::ioctl (rname, request, argument)); }
	inline bool			is_open (void) const	{ return (fd() >= 0); }
	memlink				mmap (off_t n, off_t offset = 0);
	void				munmap (memlink& l);
	void				msync (memlink& l);
	inline const string& name (void) const	{ return (m_Filename); }
	void				open (const char* filename, openmode mode, mode_t perms = 0644);
	off_t				pos (void) const;
	off_t				read (void* p, off_t n);
	off_t				readsome (void* p, off_t n);
	off_t				seek (off_t n, seekdir whence = beg);
	off_t				size (void) const;
	void				stat (struct stat& rs) const;
	void				sync (void);
	inline void			seekg (off_t n, seekdir whence = beg)	{ seek (n, whence); }
	inline void			seekp (off_t n, seekdir whence = beg)	{ seek (n, whence); }
	void				set_nonblock (bool v = true);
    inline off_t		tellg (void) const	{ return (pos()); }
    inline off_t		tellp (void) const	{ return (pos()); }
	off_t				write (const void* p, off_t n);
private:
    DLL_LOCAL static int	om_to_flags (openmode m);
    DLL_LOCAL void		set_and_throw (iostate s, const char* op);
private:
    int			m_fd;		///< Currently open file descriptor.
    string		m_Filename;	///< Currently open filename.
};

/// Argument macro for fstream::ioctl. Use like fs.ioctl (IOCTLID (TCGETS), &ts).
#define IOCTLID(r)	"ioctl("#r")", r
#define FCNTLID(r)	"fcntl("#r")", r

} // namespace std

