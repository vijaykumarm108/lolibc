// Lo-Overhead STL library - Lostl
//
#pragma once

#include "ios"
#include "string"
#include "sstream"
#include <sys/types.h>

struct stat;

namespace std {

/// \brief Implements file operations.
///
/// This is not implemented as a stream, but rather as a base for one. You
/// should use ifstream or ofstream if you want flow operators. Otherwise
/// this only implements functions for binary i/o.
///
class fstream : public ios_base {
public:
					fstream (void);
    explicit		fstream (const char* filename, openmode mode = in | out);
    explicit		fstream (int nfd, const char* filename = "");
	~fstream (void) throw();
	void				attach (int nfd, const char* filename = "");
	void				close (void);
	void				detach (void);
	int					fcntl (const char* rname, int request, long argument = 0);
	inline int			fcntl (const char* rname, int request, int argument)	{ return (fstream::fcntl (rname, request, long(argument))); }
	inline int			fcntl (const char* rname, int request, void* argument)	{ return (fstream::fcntl (rname, request, argument)); }
	inline int			fd (void) const		{ return (m_fd); }
	inline void			flush (void)		{ sync(); }
	int					ioctl (const char* rname, int request, long argument = 0);
	inline int			ioctl (const char* rname, int request, int argument)	{ return (fstream::ioctl (rname, request, long(argument))); }
	inline int			ioctl (const char* rname, int request, void* argument)	{ return (fstream::ioctl (rname, request, argument)); }
	inline bool			is_open (void) const	{ return (fd() >= 0); }
	lo::blocklink			mmap (off_t n, off_t offset = 0);
	void				munmap (lo::blocklink& l);
	void				msync (lo::blocklink& l);
	inline const string& name (void) const	{ return (m_Filename); }
	/** Opens the file in the given mode and permissions and throws an exception when it fails. */
	void				open (const char* filename, openmode mode, mode_t perms = 0644);
	off_t				pos (void) const;
	off_t				read (void* p, off_t n);
	off_t				readsome (void* p, off_t n);
	off_t				seek (off_t n, seekdir whence = beg);
	/** Returns the size of the file */
	off_t				size (void) const;
	void				stat (struct stat& rs) const;
	void				sync (void);
	inline void			seekg (off_t n, seekdir whence = beg)	{ seek (n, whence); }
	inline void			seekp (off_t n, seekdir whence = beg)	{ seek (n, whence); }
	void				set_nonblock (bool v = true);
    inline off_t		tellg (void) const	{ return (pos()); }
    inline off_t		tellp (void) const	{ return (pos()); }
	off_t				write (const void* p, off_t n);
private:
    DLL_LOCAL static int	om_to_flags (openmode m);
    DLL_LOCAL void		set_and_throw (iostate s, const char* op);
private:
    int			m_fd;		///< Currently open file descriptor.
    string		m_Filename;	///< Currently open filename.
};

/// Argument macro for fstream::ioctl. Use like fs.ioctl (IOCTLID (TCGETS), &ts).
#define IOCTLID(r)	"ioctl("#r")", r
#define FCNTLID(r)	"fcntl("#r")", r


/// \brief A string stream that writes to an fd. Implements cout and cerr.
class ofstream : public ostringstream {
public:
			ofstream (void);
    explicit		ofstream (int Fd);
    explicit		ofstream (const char* filename, openmode mode = out);
    virtual	       ~ofstream (void) throw();
    inline void		open (const char* filename, openmode mode = out) { m_File.open (filename, mode); clear (m_File.rdstate()); }
    void		close (void);
    inline bool		is_open (void) const	{ return (m_File.is_open()); }
    inline iostate	exceptions (iostate v)	{ ostringstream::exceptions(v); return (m_File.exceptions(v)); }
    inline void		setstate (iostate v)	{ ostringstream::setstate(v); m_File.setstate(v); }
    inline void		clear (iostate v = goodbit)	{ ostringstream::clear(v); m_File.clear(v); }
    inline off_t	tellp (void) const		{ return (m_File.tellp() + ostringstream::tellp()); }
    inline int		fd (void) const			{ return (m_File.fd()); }
    inline void		stat (struct stat& rs) const	{ m_File.stat (rs); }
    inline void		set_nonblock (bool v = true)	{ m_File.set_nonblock (v); }
    inline int		ioctl (const char* rname, int request, long argument = 0)	{ return (m_File.ioctl (rname, request, argument)); }
    inline int		ioctl (const char* rname, int request, int argument)		{ return (m_File.ioctl (rname, request, argument)); }
    inline int		ioctl (const char* rname, int request, void* argument)		{ return (m_File.ioctl (rname, request, argument)); }
    ofstream&		seekp (off_t p, seekdir d = beg);
    ofstream&		flush (void);
    virtual size_type	overflow (size_type n = 1);
private:
    fstream		m_File;
};

/// \brief A string stream that reads from an fd. Implements cin.
class ifstream : public istringstream {
public:
			ifstream (void);
    explicit		ifstream (int Fd);
    explicit		ifstream (const char* filename, openmode mode = in);
    inline void		open (const char* filename, openmode mode = in)	{ m_File.open (filename, mode); clear (m_File.rdstate()); }
    inline void		close (void)		{ m_File.close(); clear (m_File.rdstate()); }
    inline bool		is_open (void) const	{ return (m_File.is_open()); }
    inline iostate	exceptions (iostate v)	{ istringstream::exceptions(v); return (m_File.exceptions(v)); }
    inline void		setstate (iostate v)	{ istringstream::setstate(v); m_File.setstate(v); }
    inline void		clear (iostate v = goodbit)	{ istringstream::clear(v); m_File.clear(v); }
    inline off_t	tellg (void) const		{ return (off_t)(m_File.tellg() - remaining()); }
    inline int		fd (void) const			{ return (m_File.fd()); }
    inline void		stat (struct stat& rs) const	{ m_File.stat (rs); }
    inline void		set_nonblock (bool v = true)	{ m_File.set_nonblock (v); }
    inline int		ioctl (const char* rname, int request, long argument = 0)	{ return (m_File.ioctl (rname, request, argument)); }
    inline int		ioctl (const char* rname, int request, int argument)		{ return (m_File.ioctl (rname, request, argument)); }
    inline int		ioctl (const char* rname, int request, void* argument)		{ return (m_File.ioctl (rname, request, argument)); }
    ifstream&		seekg (off_t p, seekdir d = beg);
    int			sync (void);
    virtual size_type	underflow (size_type n = 1);
private:
    string		m_Buffer;
    fstream		m_File;
};

extern ofstream cout, cerr;
extern ifstream cin;


} // namespace std

